{"version":3,"sources":["services/cardServices.js","components/CreateNewCategory.js","components/Card.js","components/CreateNewCard.js","components/Cards.js","components/Category.js","components/Categories.js","components/App.js","services/categoryServices.js","index.js"],"names":["CardServices","this","baseUrl","fetch","firstReq","json","dataJson","idCard","method","deletedCard","cardTitle","cardBody","categoryIdToUpdate","headers","body","JSON","stringify","belongingCategoryId","categoryUpdated","cardId","updatedCard","CreateNewCategory","addCat","useState","mode","setMode","titleCategory","setTitleCategory","toggleMode","e","preventDefault","className","title","onClick","type","placeholder","value","onChange","target","console","log","match","alert","Card","id","categoryId","deleteCard","updateCard","showEditBtn","setShowEditBtn","titleCardState","setTitleCardState","bodyCardState","setBodyCardState","data-id","data-belongingcategoryid","classList","contains","window","confirm","rows","CreateNewCard","addCard","titleCard","setTitleCard","bodyCard","setBodyCard","Cards","categoryCards","map","card","_id","Category","categoryTitle","deleteCategory","updateCategory","titleCategoryState","setTitleCategoryState","then","Categories","categories","category","cards","categoryServices","idCategory","deletedCategory","titleNewCategory","updatedCategory","cardServices","App","setCategories","useEffect","getAllCategories","addCardToCategory","categoryToUpdate","find","filter","newCategoryTitle","createCategory","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cefdcaf3.chunk.js","sourcesContent":["export default class CardServices {\n    constructor() {\n        this.baseUrl = \"http://localhost:5000/cards\"\n    }\n\n\n\n    async getAllCards() {\n\n        let firstReq = await fetch(this.baseUrl)\n        let dataJson = await firstReq.json()\n\n        return dataJson\n    }\n\n\n    async deleteCard(idCard) {\n        let firstReq = await fetch(`${this.baseUrl}/${idCard}`, {\n            method: 'DELETE'\n        })\n        let deletedCard = await firstReq.json()\n\n        return deletedCard\n    }\n\n    async addCardToCategory(cardTitle, cardBody, categoryIdToUpdate) {\n\n        let firstReq = await fetch(this.baseUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ belongingCategoryId: categoryIdToUpdate, cardTitle: cardTitle, cardBody: cardBody })\n        })\n        let categoryUpdated = await firstReq.json()\n\n        return categoryUpdated\n    }\n\n\n    async updateCard(cardBody, cardTitle, cardId) {\n        let firstReq = await fetch(`${this.baseUrl}/${cardId}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ cardBody: cardBody, cardTitle: cardTitle })\n        })\n        let updatedCard = await firstReq.json()\n\n        return updatedCard\n    }\n\n\n}","import React, { useState } from 'react';\n\n\n\nconst CreateNewCategory = ({ addCat }) => {\n\n    const [mode, setMode] = useState(\"buttonMode\")\n    const [titleCategory, setTitleCategory] = useState(\"\")\n\n    const toggleMode = (e) => {\n        e.preventDefault()\n        setMode(mode === \"buttonMode\" ? \"formMode\" : \"buttonMode\")\n    }\n\n    const handleChangeInputCat = (e) => {\n        setTitleCategory(e.target.value)\n    }\n\n\n    // Do not need to name it handleClickBtnAddCategory, because we already are in \"CreateNewCategory\" component.\n    const handleClickBtnAdd = (e) => {\n        e.preventDefault()\n\n        console.log(titleCategory.match(/\\S/g))\n        //REGEX: returns an array with all characters different from space.\n        // If there are only spaces (no other different characters), is NULL\n\n        if (titleCategory.match(/\\S/g)) {\n            addCat(titleCategory)\n        } else {\n            alert('Insert a valid title!')\n        }\n\n        // clean field:\n        setTitleCategory(\"\")\n    }\n\n\n\n    if (mode === \"buttonMode\") {\n        return (\n            <div className=\"createNewCategoryContainer mt-5 mb-5\" >\n                <i className=\"fas fa-plus-circle addBtnCategory\" title=\"create new category\" onClick={toggleMode}></i>\n            </div>\n        )\n    } else if (mode === \"formMode\") {\n        return (\n            <div className=\"categoryAddBtnContainer mb-5\">\n                <div className=\"formWrapper mt-5\">\n                    <form >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Category Title</label>\n                            <input type=\"text\"\n                                className=\"form-control input-sm\"\n                                placeholder=\"Insert the title of the Category\"\n                                value={titleCategory}\n                                onChange={handleChangeInputCat} />\n                        </div>\n                        <div className=\"buttonsContainerForm\">\n                            <button className=\"btn btn-primary\" onClick={handleClickBtnAdd}>Add</button>\n                            <button className=\"btn btn-primary\" onClick={toggleMode}>Back</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default CreateNewCategory","import React, { useState } from 'react';\n\n\n\nconst Card = ({ id, title, body, categoryId, deleteCard, updateCard }) => {\n\n\n    const [showEditBtn, setShowEditBtn] = useState(false)\n    const [mode, setMode] = useState('card')  // or formUpdate\n\n    const [titleCardState, setTitleCardState] = useState(title)\n    const [bodyCardState, setBodyCardState] = useState(body)\n\n\n    const handleChangeBodyCardState = (e) => {\n        setBodyCardState(e.target.value)\n    }\n\n    const handleChangeTitleCardState = (e) => {\n        setTitleCardState(e.target.value)\n\n    }\n\n    const handleClickOnCard = (e) => {\n\n        // DELETE (the trash btn is on the card.)\n        if (e.target.classList.contains('trashingTheCard')) {\n\n            // confirmation\n            let areYouSureDelete = window.confirm('Are you sure you want to delete this card?')\n            if (areYouSureDelete) {\n                deleteCard(id, categoryId)\n            }\n        }\n\n        // UPDATE \n        else if (e.target.classList.contains('editCard')) {\n            console.log('edit Card btn pressed')\n            setMode('formUpdate')\n        }\n\n        // HIDE BTNS\n        else {\n            setShowEditBtn(showEditBtn === true ? false : true)\n        }\n    }\n\n    const handleClickOnFormUpdateBackBtn = (e) => {\n        e.preventDefault()\n        setMode('card')\n    }\n\n    const handleClickOnFormUpdateAddBtn = (e) => {\n        e.preventDefault()\n        updateCard(bodyCardState, titleCardState, id, categoryId)\n\n        setMode('card')\n        setShowEditBtn(false)\n    }\n\n    // Conditional rendering, 2 modes.\n\n    if (mode === \"card\") {\n        return (\n\n            <div className=\"card text-white bg-primary mb-3 singleCardForArr\" data-id={id} data-belongingcategoryid={categoryId} onClick={handleClickOnCard}>\n                <i className={`fas fa-trash-alt trashingTheCard ${showEditBtn === true ? \"trashingCardVisible\" : \"trashingCardInvisible\"}`}></i>\n                <i className={`fas fa-edit editCard ${showEditBtn === true ? \"editCardVisible\" : \"editCardInvisible\"}`}></i>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{title}</h5>\n                    <p className=\"card-text\">{body}</p>\n                </div>\n            </div >\n        )\n    } else if (mode === \"formUpdate\") {\n\n        return (\n            <div className=\"containerOfUpdateCard mb-3\">\n                <div className=\"formWrapper\">\n                    <form >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Title</label>\n                            <input type=\"text\" className=\"form-control input-sm\" placeholder=\"Insert the title of the card\" value={titleCardState} onChange={handleChangeTitleCardState} />\n                        </div>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Content</label>\n                            <textarea rows=\"4\" type=\"text\" className=\"form-control input-group-sm\" placeholder=\"Insert the content of the card\" value={bodyCardState} onChange={handleChangeBodyCardState} />\n                        </div>\n                        <div className=\"buttonsContainerForm\">\n                            <button className=\"btn btn-primary\" onClick={handleClickOnFormUpdateAddBtn}>Update</button>\n                            <button className=\"btn btn-primary\" onClick={handleClickOnFormUpdateBackBtn}>Back</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n\n\n    }\n\n}\n\nexport default Card","import React, { useState } from 'react';\n\n\n\nconst CreateNewCard = ({ addCard, categoryId }) => {\n\n    // This is either the button or the form for creating a new card.\n\n    const [mode, setMode] = useState(\"button\")  // or form\n    const [titleCard, setTitleCard] = useState(\"\")\n    const [bodyCard, setBodyCard] = useState(\"\")\n\n\n    const toggleMode = (e) => {\n        e.preventDefault()\n        setMode(mode === \"button\" ? \"form\" : \"button\")\n    }\n\n    const handleChangeTitle = (e) => {\n        setTitleCard(e.target.value)\n    }\n\n    const handleChangeBody = (e) => {\n        setBodyCard(e.target.value)\n    }\n\n    const handleClickBtnAdd = (e) => {\n        e.preventDefault()\n        addCard(titleCard, bodyCard, categoryId)\n        toggleMode(e)\n\n        // clear fields.\n        setTitleCard(\"\")\n        setBodyCard(\"\")\n    }\n\n\n    // Button mode\n    if (mode === \"button\") {\n        return (\n            <div className=\"containerOfNewCardBtn\">\n                <span className=\"createNewCardContainer mb-4\">\n                    <i className=\"fas fa-plus-circle addBtnCard\" title=\"create new card\" onClick={toggleMode}></i>\n                </span>\n            </div>\n        )\n    }\n\n    // Form mode\n    else if (mode === \"form\") {\n        return (\n            <div className=\"containerOfNewCardBtn\">\n                <div className=\"formWrapper\">\n                    <form >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Title</label>\n                            <input type=\"text\" className=\"form-control input-sm\" placeholder=\"Insert the title of the card\" value={titleCard} onChange={handleChangeTitle} />\n                        </div>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Content</label>\n                            <textarea rows=\"4\" type=\"text\" className=\"form-control input-group-sm\" placeholder=\"Insert the content of the card\" value={bodyCard} onChange={handleChangeBody} />\n                        </div>\n                        <div className=\"buttonsContainerForm\">\n                            <button className=\"btn btn-primary\" onClick={handleClickBtnAdd}>Add</button>\n                            <button className=\"btn btn-primary\" onClick={toggleMode}>Back</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default CreateNewCard","import Card from './Card';\nimport CreateNewCard from './CreateNewCard';\n\n\n\n\nconst Cards = ({ categoryCards, categoryId, deleteCard, addCard, updateCard }) => {\n    return (\n        <div className=\"cardsContainerWhole\">\n            <div className=\"cardsContainer\">\n                {categoryCards.map(card =>\n                    <Card\n                        key={card._id}\n                        id={card._id}\n                        title={card.title}\n                        body={card.body}\n                        categoryId={categoryId}\n\n                        deleteCard={deleteCard}\n                        updateCard={updateCard}\n                    />)}\n            </div>\n\n\n\n            <CreateNewCard\n                addCard={addCard}\n                categoryId={categoryId}\n            />\n        </div>\n    )\n}\n\nexport default Cards","import React, { useState } from 'react';\nimport Cards from './Cards';\n\n\nconst Category = ({ categoryTitle, categoryId, categoryCards, addCard, deleteCard, deleteCategory, updateCard, updateCategory }) => {\n\n    const [showEditBtn, setShowEditBtn] = useState(false)\n    const [mode, setMode] = useState('title')  // or formToUpdate\n    const [titleCategoryState, setTitleCategoryState] = useState(categoryTitle)\n\n    const handleChangeTitleCategoryState = (e) => {\n        setTitleCategoryState(e.target.value)\n    }\n\n    const handleClickFormBackBtn = (e) => {\n        e.preventDefault()\n        setMode('title')\n    }\n\n    const handleClickFormUpdateBtn = (e) => {\n        e.preventDefault()\n        updateCategory(titleCategoryState, categoryId).then(() => setMode('title'))\n    }\n\n    const handleEditModeAndDelete = (e) => {\n\n        // Edit mode: when clicking the title of category\n        if (e.target.classList.contains('enableEditMode')) {\n            setShowEditBtn(showEditBtn === true ? false : true)\n        }\n\n        // delete: if pressing the trash button\n        else if (e.target.classList.contains('trashingTheCategory')) {\n            let sureWantDelete = window.confirm('Are you sure you want to delete this category?')\n            if (sureWantDelete) {\n                deleteCategory(categoryId)\n            } else {\n                setShowEditBtn(false)\n            }\n        }\n\n        // update\n        else if (e.target.classList.contains('editCategoryBtn')) {\n            setMode('formToUpdate')\n        }\n\n\n    }\n\n\n    if (mode === 'formToUpdate') {\n        return (\n            <div className=\"categoryAddBtnContainer mb-5\">\n                <div className=\"formWrapper mt-5\">\n                    <form >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Category Title</label>\n                            <input type=\"text\"\n                                className=\"form-control input-sm\"\n                                placeholder=\"Insert the title of the Category\"\n                                value={titleCategoryState}\n                                onChange={handleChangeTitleCategoryState} />\n                        </div>\n                        <div className=\"buttonsContainerForm\">\n                            <button className=\"btn btn-primary\" onClick={handleClickFormUpdateBtn}>Update</button>\n                            <button className=\"btn btn-primary\" onClick={handleClickFormBackBtn}>Back</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n\n\n    } else if (mode === 'title') {\n        return (\n            <div className=\"category\" data-id={categoryId}>\n                <div className=\"mt-5 mb-2 categoryTitleFont\" onClick={handleEditModeAndDelete}>\n\n                    <b className=\"categoryTitleFont enableEditMode\">\n                        <i className={`fas fa-edit editCategoryBtn ${showEditBtn === true ? \"editCatVisible\" : \"editCatInvisible\"}`} ></i>\n                        <i className={`fas fa-trash-alt trashingTheCategory ${showEditBtn === true ? \"trashingCatVisible\" : \"trashingCatInvisible\"}`}></i>\n\n                        {categoryTitle}\n\n                    </b>\n                </div>\n\n\n\n                <Cards\n                    categoryCards={categoryCards}\n                    addCard={addCard}\n                    deleteCard={deleteCard}\n                    categoryId={categoryId}\n                    updateCard={updateCard}\n                />\n\n\n            </div>\n        )\n    }\n\n\n}\n\n\nexport default Category","import React from 'react';\nimport Category from './Category';\n\n\n\n\nconst Categories = ({ categories, addCard, deleteCard, deleteCategory, updateCard, updateCategory }) => {\n\n\n    return (\n        <div>\n            {\n                categories.map(category =>\n                    <Category\n                        key={category._id}\n\n                        categoryTitle={category.title}\n                        categoryId={category._id}\n                        categoryCards={category.cards}\n\n                        addCard={addCard}\n                        deleteCard={deleteCard}\n                        deleteCategory={deleteCategory}\n                        updateCard={updateCard}\n                        updateCategory={updateCategory}\n                    />)\n            }\n        </div>\n    )\n\n}\n\n\n\nexport default Categories","import React, { useState, useEffect } from 'react';\n\nimport CardServices from '../services/cardServices';\nimport CategoryServices from '../services/categoryServices';\n\n// components.\nimport CreateNewCategory from './CreateNewCategory';\nimport Categories from './Categories';\n\n\n\n// should I initialize it inside App? Even if it rerenders it, nothing changes, but might be slower.\nconst categoryServices = new CategoryServices()\nconst cardServices = new CardServices()\n\n\n\n\n\nconst App = () => {\n\n  const [categories, setCategories] = useState([])\n\n  useEffect(() => {\n    categoryServices.getAllCategories().then(categories => {\n      console.log(\"all the data is\", categories)\n      setCategories(categories)\n    })\n  }, [])\n\n\n  const addCard = (cardTitle, cardBody, categoryIdToUpdate) => {\n    cardServices.addCardToCategory(cardTitle, cardBody, categoryIdToUpdate)\n      .then(categoryUpdated => {\n        setCategories(categories.map(category => category._id === categoryIdToUpdate ? categoryUpdated : category))\n      })\n  }\n\n\n  const addCat = (newCategoryTitle) => {\n    categoryServices.createCategory(newCategoryTitle)\n      .then(idCategory => {  //the response from backend is the id of the new category created. Should change the backend.\n        console.log(`new category! with id ${idCategory}`)\n        setCategories(categories.concat({ _id: idCategory, title: newCategoryTitle, cards: [] }))\n      })\n  }\n\n\n  const deleteCard = (idCard, belongingCategoryId) => {\n    cardServices.deleteCard(idCard)\n      .then(deletedCard => {\n        console.log(\"deletedCard is\", deletedCard)\n\n        const categoryToUpdate = categories.find(category => category._id === belongingCategoryId)\n        const categoryUpdated = { ...categoryToUpdate, cards: categoryToUpdate.cards.filter(card => card._id !== deletedCard._id) }\n\n        // updates category with the eliminated card.\n        setCategories(categories.map(category => category._id === belongingCategoryId ? categoryUpdated : category))\n      })\n  }\n\n\n  const deleteCategory = (idCategory) => {\n    categoryServices.deleteCategory(idCategory)\n      .then(deletedCategory => {\n        console.log(\"deleted category is\", deletedCategory)\n        setCategories(categories.filter(category => category._id !== idCategory))\n      })\n  }\n\n\n  const updateCard = (cardBody, cardTitle, cardId, belongingCategoryId) => {\n    cardServices.updateCard(cardBody, cardTitle, cardId)\n      .then(updatedCard => {\n\n        const categoryToUpdate = categories.find(category => category._id === belongingCategoryId)\n        const categoryUpdated = {\n          ...categoryToUpdate,\n          cards: categoryToUpdate.cards.map(card => card._id === cardId ? updatedCard : card)\n        }\n\n        setCategories(categories.map(category => category._id === belongingCategoryId ? categoryUpdated : category))\n\n      })\n  }\n\n  const updateCategory = (newCategoryTitle, categoryId) => {\n    return categoryServices.updateCategory(categoryId, newCategoryTitle)\n      .then(updatedCategory => {\n        setCategories(categories.map(category => category._id === categoryId ? updatedCategory : category))\n      })\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <Categories\n        categories={categories}\n\n        addCard={addCard}\n        deleteCard={deleteCard}\n        deleteCategory={deleteCategory}\n        updateCard={updateCard}\n        updateCategory={updateCategory}\n      />\n\n      <CreateNewCategory addCat={addCat} />\n\n    </div>\n  );\n}\n\nexport default App;\n","export default class CategoryServices {\n    constructor() {\n        this.baseUrl = \"http://localhost:5000/categories\"\n    }\n\n\n\n    async getAllCategories() {\n\n        let firstReq = await fetch(this.baseUrl)\n        let categories = await firstReq.json()\n\n        return categories\n    }\n\n    async createCategory(categoryTitle) {\n\n        let firstReq = await fetch(this.baseUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ categoryTitle: categoryTitle })\n        })\n        let idCategory = await firstReq.json()\n\n        return idCategory\n    }\n\n    async deleteCategory(categoryId) {\n\n        let firstReq = await fetch(`${this.baseUrl}/${categoryId}`, {\n            method: 'DELETE'\n        })\n        let deletedCategory = await firstReq.json()\n\n        return deletedCategory\n    }\n\n\n    async updateCategory(categoryId, titleNewCategory) {\n        let firstReq = await fetch(`${this.baseUrl}/${categoryId}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ categoryTitle: titleNewCategory })\n        })\n        let updatedCategory = await firstReq.json()\n\n        return updatedCategory\n    }\n\n\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}